<?php
/**
 * Theme functions and definitions.
 *
 * For additional information on potential customization options,
 * read the developers' documentation:
 *
 * https://developers.elementor.com/docs/hello-elementor-theme/
 *
 * @package HelloElementorChild
 */

if ( ! defined( 'ABSPATH' ) ) {
	exit; // Exit if accessed directly.
}

define( 'HELLO_ELEMENTOR_CHILD_VERSION', '2.0.0' );

/**
 * Load child theme scripts & styles.
 *
 * @return void
 */
function hello_elementor_child_scripts_styles() {

	wp_enqueue_style(
		'hello-elementor-child-style',
		get_stylesheet_directory_uri() . '/style.css',
		[
			'hello-elementor-theme-style',
		],
		HELLO_ELEMENTOR_CHILD_VERSION
	);

}
add_action( 'wp_enqueue_scripts', 'hello_elementor_child_scripts_styles', 20 );







//CREATE ACF FIELDS TO OBJECT DATA FOR REST API


add_filter('woocommerce_rest_prepare_product_object', 'include_acf_fields_in_api_response', 10, 3);

function include_acf_fields_in_api_response($response, $post, $request) {
    $data = $response->get_data();
	$acf_fields = get_fields($response->data['id']);
    $data['acf'] = $acf_fields;
    $response->set_data($data);
    return $response;
}




add_filter('rest_prepare_main-category', 'include_acf_fields_in_main_category_response', 10, 3);

function include_acf_fields_in_main_category_response($response, $post, $request) {
    // Check if ACF is active
    if (function_exists('get_fields')) {
        $data = $response->get_data();
        $acf_fields = get_fields($post->ID); // Use $post->ID to get ACF fields

        // Check if ACF fields exist
        if ($acf_fields) {
            $data['acf'] = $acf_fields;
        } else {
            $data['acf'] = []; // Return an empty array if no fields found
        }

        $response->set_data($data);
    }

    return $response;
}




add_filter('rest_prepare_sub-categories', 'include_acf_fields_in_sub_categories_response', 10, 3);

function include_acf_fields_in_sub_categories_response($response, $post, $request) {
    // Check if ACF is active
    if (function_exists('get_fields')) {
        $data = $response->get_data();
        $acf_fields = get_fields($post->ID); // Use $post->ID to get ACF fields

        // Check if ACF fields exist
        if ($acf_fields) {
            $data['acf'] = $acf_fields;
        } else {
            $data['acf'] = []; // Return an empty array if no fields found
        }

        $response->set_data($data);
    }

    return $response;
}






add_filter('acf/rest_api/menu_item/get_fields', function($fields, $post) {
    // Replace 'your_field_name' with the actual name of your ACF field
    $fields['arabic'] = get_field('arabic', $post->ID);
    return $fields;
});





//FEATURED IMAGES FOR POSTS AND PAGES TO DSIPLAY IN REST API

add_action('rest_api_init', 'register_rest_images');
function register_rest_images() {
    // Register for posts
    register_rest_field('post', 'fea_data', array(
        'get_callback'    => 'get_rest_featured_image_data',
        'update_callback' => null,
        'schema'          => null,
    ));

    // Register for pages
    register_rest_field('page', 'fea_data', array(
        'get_callback'    => 'get_rest_featured_image_data',
        'update_callback' => null,
        'schema'          => null,
    ));
}

function get_rest_featured_image_data($object, $field_name, $request) {
    if ($object['featured_media']) {
        $attachment_id = $object['featured_media'];
        $img = wp_get_attachment_image_src($attachment_id, 'app-thumb');
        $attachment_meta = wp_get_attachment_metadata($attachment_id);
        $alt_text = get_post_meta($attachment_id, '_wp_attachment_image_alt', true);

        return array(
            'url'    => $img[0],
            'alt'    => $alt_text,
            'width'  => isset($img[1]) ? $img[1] : null,
            'height' => isset($img[2]) ? $img[2] : null,
            'sizes'  => isset($attachment_meta['sizes']) ? $attachment_meta['sizes'] : null,
        );
    }
    return false;
}



add_action('rest_api_init', function () {
    error_log('REST API Initialized for main-category');
    
    register_rest_field('main-category', 'sub_cat', [
        'get_callback' => function ($data) {
            $post_id = $data['id'];
            error_log('Getting sub_cat for post ID: ' . $post_id);
            return get_field('sub_cat', $post_id);
        },
        'schema' => null,
    ]);
});


////////MENU

function register_site_menu_endpoint() {
    register_rest_route('sitemenu/v1', '/menus/(?P<slug>[\w-]+)', array(
        'methods' => 'GET',
        'callback' => 'get_menu_by_slug',
    ));
}

function get_menu_by_slug($data) {
    $slug = $data['slug'];
    $menu = wp_get_nav_menu_object($slug);

    if (!$menu) {
        return new WP_Error('no_menu', 'Menu not found', array('status' => 404));
    }

    $menu_items = wp_get_nav_menu_items($menu->term_id);

    // Loop through menu items and add ACF fields
    foreach ($menu_items as $item) {
        // Get ACF fields for this menu item
        $item->acf = get_fields($item->ID); // Replace with the specific field retrieval if needed
    }

    return new WP_REST_Response($menu_items, 200);
}

add_action('rest_api_init', 'register_site_menu_endpoint');






//https://demo.chuchoterqatar.com/wp-json/sitemenu/v1/menus/footer-menu


////////REST API PRODUCTS////////
add_action('rest_api_init', 'wc_custom_register_api_endpoints');

function wc_custom_register_api_endpoints() {
    register_rest_route('wc-custom/v1', '/products', array(
        'methods' => 'GET',
        'callback' => 'wc_custom_get_products',
        'permission_callback' => '__return_true',
        'args' => array(
            'id' => array(
                'required' => false,
                'validate_callback' => function($param, $request, $key) {
                    return is_numeric($param);
                }
            ),
            'reviews_count' => array(
                'required' => false,
                'validate_callback' => function($param, $request, $key) {
                    return is_numeric($param);
                }
            ),
            'min_price' => array(
                'required' => false,
                'validate_callback' => function($param, $request, $key) {
                    return is_numeric($param);
                }
            ),
            'page' => array(
                'required' => false,
                'validate_callback' => function($param, $request, $key) {
                    return is_numeric($param);
                }
            ),
            'per_page' => array(
                'required' => false,
                'validate_callback' => function($param, $request, $key) {
                    return is_numeric($param);
                }
            ),
            'main_categories' => array(
                'required' => false,
                'validate_callback' => function($param, $request, $key) {
                    return is_string($param);
                }
            ),
            'sub_categories' => array(
                'required' => false,
                'validate_callback' => function($param, $request, $key) {
                    return is_string($param);
                }
            ),
            'language' => array(
                'required' => false,
                'validate_callback' => function($param, $request, $key) {
                    return is_string($param);
                }
            ),
            'search' => array(
                'required' => false,
                'validate_callback' => function($param, $request, $key) {
                    return is_string($param);
                },
            ),
        ),
    ));
}

// Callback function for the endpoint
function wc_custom_get_products($request) {
    $id = $request->get_param('id');
    $reviews_count = $request->get_param('reviews_count');
    $min_price = $request->get_param('min_price');
    $page = $request->get_param('page') ? absint($request->get_param('page')) : 1;
    $per_page = $request->get_param('per_page') ? absint($request->get_param('per_page')) : 10;
    $search = $request->get_param('search');
    $data = array();

    // Build the query arguments for products
    $args = array(
        'post_type' => 'product',
        'posts_per_page' => $per_page,
        'paged' => $page,
        'meta_query' => array('relation' => 'AND'),
    );

    // Search by product name
    if (!empty($search)) {
        $args['s'] = sanitize_text_field($search);
    }

    // Price filtering
    if (!empty($min_price)) {
        $args['meta_query'][] = array(
            'key' => '_price',
            'value' => $min_price,
            'compare' => '>=',
            'type' => 'NUMERIC',
        );
    }

    // Reviews count filtering
    if ($reviews_count && $reviews_count > 0) {
        $args['meta_query'][] = array(
            'key' => 'user_reviews',
            'compare' => 'EXISTS',
        );
    }

    // Check for ACF main category
    $main_categories = $request->get_param('main_categories');
    if (!empty($main_categories)) {
        $args['meta_query'][] = array(
            'key' => 'main_categories',
            'value' => sanitize_text_field($main_categories),
            'compare' => 'LIKE',
        );
    }

    // Check for ACF sub category
    $sub_categories = $request->get_param('sub_categories');
    if (!empty($sub_categories)) {
        $args['meta_query'][] = array(
            'key' => 'sub_categories',
            'value' => sanitize_text_field($sub_categories),
            'compare' => 'LIKE',
        );
    }

    // Check for ACF language
    $language = $request->get_param('language');
    if (!empty($language)) {
        $args['meta_query'][] = array(
            'key' => 'language',
            'value' => sanitize_text_field($language),
            'compare' => 'LIKE',
        );
    }

    if ($id) {
        // Get product by ID
        $product = wc_get_product($id);
        if ($product) {
            $user_reviews = get_field('user_reviews', $product->get_id());
            if (is_array($user_reviews) && count($user_reviews) >= $reviews_count) {
                $data[] = get_product_data($product);
            }
        } else {
            return new WP_REST_Response('Product not found', 404);
        }
    } else {
        // Retrieve all products if no ID is provided
        $products = new WP_Query($args);
        if ($products->have_posts()) {
            while ($products->have_posts()) {
                $products->the_post();
                global $product;

                // Check review count
                $user_reviews = get_field('user_reviews', $product->get_id());
                if ($reviews_count > 0) {
                    if (is_array($user_reviews) && count($user_reviews) >= $reviews_count) {
                        $data[] = get_product_data($product);
                    }
                } else {
                    // If reviews_count is 0, add all products
                    $data[] = get_product_data($product);
                }
            }
            wp_reset_postdata();
        }
    }

    // Return response with pagination info
    return new WP_REST_Response(array(
        'data' => $data,
        'total' => isset($products) ? $products->found_posts : 1,
        'page' => $page,
        'per_page' => $per_page,
    ), 200);
}

// Function to get product data
function get_product_data($product) {
    $images = [];
    $image_ids = $product->get_gallery_image_ids();

    // Add the main image
    $main_image_id = $product->get_image_id();
    if ($main_image_id) {
        $images[] = format_image_data($main_image_id);
    }

    // Add gallery images
    foreach ($image_ids as $image_id) {
        $images[] = format_image_data($image_id);
    }

    // Get Yoast SEO data
    $yoast_head = get_post_meta($product->get_id(), '_yoast_wpseo_head', true);
    $yoast_json = get_post_meta($product->get_id(), '_yoast_wpseo_json', true);

    // Get ACF data
    $acf_data = get_fields($product->get_id());

    return array(
        'id' => $product->get_id(),
        'name' => $product->get_name(),
        'slug' => $product->get_slug(),
        'description' => $product->get_description(),
        'short_description' => $product->get_short_description(),
        'price' => $product->get_price(),
        'regular_price' => $product->get_regular_price(),
        'sale_price' => $product->get_sale_price(),
        'images' => $images,
        'attributes' => $product->get_attributes(),
        'acf' => $acf_data,
        'yoast_head' => $yoast_head,
        'yoast_head_json' => json_decode($yoast_json, true),
    );
}

// Helper function to format image data
function format_image_data($image_id) {
    return array(
        'id' => $image_id,
        'src' => wp_get_attachment_url($image_id),
        'name' => get_the_title($image_id),
        'alt' => get_post_meta($image_id, '_wp_attachment_image_alt', true),
    );
}


// https://demo.chuchoterqatar.com/wp-json/wc-custom/v1/products?search=&reviews_count=0&min_price=0&page=0&per_page=0&sub_categories=&main_categories=

